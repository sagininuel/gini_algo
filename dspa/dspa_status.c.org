#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <stdarg.h>
#include <time.h>
#include <curl/curl.h>
#include <libxml/parser.h>

#include "comm_def.h"

    
void *ps_status_start(void *data);

extern void pd_set_gpio_alt();
extern int  getTemperature_algorithm();
extern int  getCo2_algorithm(co2_sensor_t *sensor_d);
extern int  getAll_algorithm(co2_sensor_t *sensor_d);
extern int  getCo_algorithm();

extern int  pd_get_gpio_input(int gpio_no);
extern int  pd_set_gpio_output(int gpio_no);

extern void pd_curl_send_alarm(int alarm_code);
extern void pd_send_sensor_data(int co, int co2, int temp, int voc);

int fire_1st_active  = FIRE_NOR_LEVEL;
int fire_2nd_active  = FIRE_NOR_LEVEL;
int fire_3rd_active  = FIRE_NOR_LEVEL;
int save_manual      = FIRE_NOR_LEVEL;
int save_fire_manual = FIRE_NOR_LEVEL;
uint32_t loop_cnt    = 0;

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
void log_write(const char* fmt, ...)
{
    va_list args;
    time_t rawtime;
    struct tm *info;
    char c_time[80];
    char logfile[64];
    char date_str[16];
    char buff[MAX_IPC_BUFFER];

    time( &rawtime );
    info = localtime( &rawtime );
    strftime(c_time,80,"%Y-%m-%d %H:%M:%S ", info);

    bzero(buff, sizeof(buff));

    va_start(args, fmt);
    vsnprintf(buff, sizeof(buff), fmt, args);
    va_end(args);

    bzero(date_str, sizeof(date_str));
    strncpy(date_str, c_time, (size_t)10);

    bzero(logfile, sizeof(logfile));
    sprintf(logfile, "%s.%s", LOG_PATH, date_str);

    FILE *out = fopen(logfile, "a");

    if (out == NULL) return;

    fprintf(out, "[%s] %s", c_time, buff);
    fclose(out);

    return;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
int pd_check_fire()
{
    co2_sensor_t sensor_d;
    int recv_fire = 0, fire_flag = 0, fire_co2 = 0, fire_co = 0, fire_temp = 0, fire_manual = 0;

    memset(&sensor_d, 0x00, sizeof(co2_sensor_t));

    int heat_sensor =  pd_get_gpio_input(NUM_IN_GPIO_HEAT_SENSOR);
    int curr_manual =  pd_get_gpio_input(NUM_IN_GPIO_MANUAL_SWITCH);
#if 0
    int avgTemp   =  getTemperature_algorithm();
#endif

    int curr_co  =  getCo_algorithm();
    int rslt     =  getCo2_algorithm(&sensor_d);
    //int rslt     =  getAll_algorithm(&sensor_d);
        
    if (curr_manual & save_manual)
    {
#if 0
        if (sensor_d.temp >= TEMP_3RD_LEVEL)               
            fire_manual = FIRE_3RD_LEVEL;
        else if ((sensor_d.temp < TEMP_3RD_LEVEL) & (sensor_d.temp >= TEMP_2ND_LEVEL))
            fire_manual = FIRE_2ND_LEVEL;
        else
            fire_manual = FIRE_1ST_LEVEL;
#else
        if (save_fire_manual == FIRE_2ND_LEVEL)
        {
            save_fire_manual = fire_manual = FIRE_3RD_LEVEL;
        }
        else if (save_fire_manual == FIRE_1ST_LEVEL)
        {
            save_fire_manual = fire_manual = FIRE_2ND_LEVEL;
        }
        else
            save_fire_manual = fire_manual = FIRE_1ST_LEVEL;
        
#endif
    }
    else
    {
        save_fire_manual = FIRE_NOR_LEVEL;
    }

    if (curr_co >= CO_3RD_LEVEL)                     
        fire_co = FIRE_3RD_LEVEL;
    else if ((curr_co < CO_3RD_LEVEL) & (curr_co >= CO_2ND_LEVEL))
        fire_co = FIRE_2ND_LEVEL;
    else if ((curr_co < CO_2ND_LEVEL) & (curr_co >= CO_1ST_LEVEL))
        fire_co = FIRE_1ST_LEVEL;
    else if ((curr_co < CO_1ST_LEVEL) & (curr_co >= CO_ANN_LEVEL)) 
        fire_co = FIRE_ANN_LEVEL;
    else
        fire_co = FIRE_NOR_LEVEL;

    if (sensor_d.co2 >= CO2_3RD_LEVEL)                     
        fire_co2 = FIRE_3RD_LEVEL;
    else if ((sensor_d.co2 < CO2_3RD_LEVEL) & (sensor_d.co2 >= CO2_2ND_LEVEL))
        fire_co2 = FIRE_2ND_LEVEL;
    else if ((sensor_d.co2 < CO2_2ND_LEVEL) & (sensor_d.co2 >= CO2_1ST_LEVEL))
        fire_co2 = FIRE_1ST_LEVEL;
    else if ((sensor_d.co2 < CO2_1ST_LEVEL) & (sensor_d.co2 >= CO2_ANN_LEVEL)) 
        fire_co2 = FIRE_ANN_LEVEL;
    else
        fire_co2 = FIRE_NOR_LEVEL;

    if (sensor_d.temp >= TEMP_1ST_LEVEL)                    
        fire_temp = FIRE_1ST_LEVEL;
    else
        fire_temp = FIRE_NOR_LEVEL;


    save_manual = curr_manual;
                
    if (fire_manual >= FIRE_1ST_LEVEL & fire_manual <= FIRE_3RD_LEVEL)
    {
        fire_flag = fire_manual;
        save_manual = 0;
    }
    else if ((fire_co == FIRE_1ST_LEVEL)  & (fire_temp >= FIRE_1ST_LEVEL))
    {
        fire_flag = FIRE_1ST_LEVEL;
    }
    else if ((fire_co == FIRE_2ND_LEVEL)  & (fire_temp >= FIRE_1ST_LEVEL))
    {
        fire_flag = FIRE_2ND_LEVEL;
    }
    else if ((fire_co == FIRE_3RD_LEVEL)  & (fire_temp >= FIRE_1ST_LEVEL))
    {
        fire_flag = FIRE_3RD_LEVEL;
    }
    else if ((fire_co == FIRE_ANN_LEVEL))
    {
        fire_flag = FIRE_ANN_LEVEL;
    }

    if (fire_flag >= FIRE_1ST_LEVEL)
    {
        log_write("CO(ppm): %d, CO2(ppm): %d, TEMP: %d, VOC: %d\n", curr_co, sensor_d.co2, sensor_d.temp, sensor_d.voc);
        (void) pd_send_sensor_data(curr_co, sensor_d.co2, sensor_d.temp, sensor_d.voc);
    }
    else
    {
#if 0 // test
        if ((loop_cnt > 45) || (loop_cnt == 0)) // 5 Min
        {
            log_write("CO(ppm): %d, CO2(ppm): %d, TEMP: %d, VOC: %d\n", curr_co,sensor_d.co2, sensor_d.temp, sensor_d.voc);
            (void) pd_send_sensor_data(curr_co, sensor_d.co2, sensor_d.temp, sensor_d.voc);
            loop_cnt = 0;
        }
        loop_cnt++;
#else
        log_write("CO(ppm): %d, CO2(ppm): %d, TEMP: %d, VOC: %d\n", curr_co, sensor_d.co2, sensor_d.temp, sensor_d.voc);
        (void) pd_send_sensor_data(curr_co, sensor_d.co2, sensor_d.temp, sensor_d.voc);
#endif

        if (pd_get_gpio_input(NUM_IN_GPIO_FIRE_ALARM)) fire_flag = FIRE_RCV_ALARM;
    }

    return fire_flag;
}

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
void *ps_status_start(void *data)
{

    printf("START Fire Control System() !!!!!\n");

    (void) wiringPiSetupGpio();
    (void) pd_set_gpio_alt();

    while(1)
    {
        int fire_level = pd_check_fire();

#if 0 // test -------------------------------------------------------------------------------------------
        if (fire_level == FIRE_ANN_LEVEL)
        {
            log_write("There is a risk of fire.\n");
            (void) pd_curl_send_alarm(ANN_WARNING);
        }
        else if (fire_level == FIRE_RCV_ALARM)
        {
            log_write("fire breaks out in the building, and Rolling shutters begin to operate.\n");
            (void) pd_curl_send_alarm(ANN_SHUTTER);

            pd_set_gpio_output(NUM_OUT_GPIO_SHUTTER);
            sleep(1);
            pd_set_gpio_output(NUM_OUT_GPIO_SHUTTER);
        }	
        else if (fire_level == FIRE_1ST_LEVEL)
        {
            if (fire_1st_active == 0)
            {
                log_write("FIRE !!!!!, Transmit fire signal to fire reception unit.\n");
                (void) pd_curl_send_alarm(ANN_FIRE_START);
                pd_set_gpio_output(NUM_OUT_GPIO_FIRE_CONTROL);

                log_write("Rolling shutter operation begins. !!!!!\n");
                (void) pd_curl_send_alarm(ANN_SHUTTER);

                pd_set_gpio_output(NUM_OUT_GPIO_SHUTTER);
                sleep(1);
                pd_set_gpio_output(NUM_OUT_GPIO_SHUTTER);
                log_write("Rolling shutter operation completed. & Fire announcement\n");

                log_write("1'St fire extinguisher operation !!!!!\n");
                (void) pd_curl_send_alarm(ANN_SPRAYING);
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA1);

                fire_1st_active = 1;
            }
            else
            {
                log_write("Fire extinguishing announcement !!!!!\n");
                (void) pd_curl_send_alarm(ANN_FIRE_ING);
            }
        }
        else if (fire_level == FIRE_2ND_LEVEL)
        {
            log_write("Fire extinguishing announcement !!!!!\n");
            (void) pd_curl_send_alarm(ANN_FIRE_ING);

            if (fire_2nd_active == 0)
            {
                log_write("2'nd fire extinguisher operation !!!!!\n");
                (void) pd_curl_send_alarm(ANN_SPRAYING);
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA2);

                fire_2nd_active = 1;
            }
        }
        else if (fire_level == FIRE_3RD_LEVEL)
        {
            log_write("Fire extinguishing announcement !!!!!\n");
            (void) pd_curl_send_alarm(ANN_FIRE_ING);

            if (fire_3rd_active == 0)
            {
                log_write("3'rd fire extinguisher operation !!!!!\n");
                (void) pd_curl_send_alarm(ANN_SPRAYING);
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA3);
                fire_3rd_active = 1;
            }
        }
        else if (fire_level == FIRE_NOR_LEVEL)
        {
            if (fire_1st_active)
            {
                log_write("Fire suppression completed announcement !!!!!\n");
                (void) pd_curl_send_alarm(ANN_FIRE_END);
            }

            if (fire_3rd_active)
            {
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA3);
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA2);
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA1);
                fire_3rd_active = 0;
                fire_2nd_active = 0;
                fire_1st_active = 0;
            }
            else if (fire_2nd_active)
            {
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA2);
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA1);
                fire_2nd_active = 0;
                fire_1st_active = 0;
            }
            else if (fire_1st_active)
            {
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA1);
                fire_1st_active = 0;
            }
        }
#else // test -------------------------------------------------------------------------------------------
        if (fire_level == FIRE_ANN_LEVEL)
        {
            log_write("There is a risk of fire.\n");
            (void) pd_curl_send_alarm(ANN_WARNING);
        }
        else if (fire_level == FIRE_RCV_ALARM)
        {
            log_write("fire breaks out in the building, and Rolling shutters begin to operate.\n");
            (void) pd_curl_send_alarm(ANN_SHUTTER);

            pd_set_gpio_output(NUM_OUT_GPIO_DSPA3);
            sleep(1);
            pd_set_gpio_output(NUM_OUT_GPIO_DSPA3);
        }
        else if (fire_level == FIRE_1ST_LEVEL)
        {
            if (fire_1st_active == 0)
            {
                log_write("FIRE !!!!!, Transmit fire signal to fire reception unit.\n");
                (void) pd_curl_send_alarm(ANN_FIRE_START);
                pd_set_gpio_output(NUM_OUT_GPIO_FIRE_CONTROL);

                log_write("Rolling shutter operation begins. !!!!!\n");
                (void) pd_curl_send_alarm(ANN_SHUTTER);

                pd_set_gpio_output(NUM_OUT_GPIO_DSPA3);
                sleep(1);
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA3);
                log_write("Rolling shutter operation completed. & Fire announcement\n");

                log_write("1'St fire extinguisher operation !!!!!\n");
                (void) pd_curl_send_alarm(ANN_SPRAYING);
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA2);

                fire_1st_active = 1;
            }
            else
            {
                log_write("Fire extinguishing announcement !!!!!\n");
                (void) pd_curl_send_alarm(ANN_FIRE_ING);
            }
        }
        else if (fire_level == FIRE_2ND_LEVEL)
        {
            log_write("Fire extinguishing announcement !!!!!\n");
            (void) pd_curl_send_alarm(ANN_FIRE_ING);
            fire_2nd_active = 1;
        }
        else if (fire_level == FIRE_3RD_LEVEL)
        {
            log_write("Fire extinguishing announcement !!!!!\n");
            (void) pd_curl_send_alarm(ANN_FIRE_ING);
            fire_3rd_active = 1;
        }
        else if (fire_level == FIRE_NOR_LEVEL)
        {
            if (fire_1st_active)
            {
                log_write("Fire suppression completed announcement !!!!!\n");
                (void) pd_curl_send_alarm(ANN_FIRE_END);
            }

            if (fire_3rd_active)
            {
                //pd_set_gpio_output(NUM_OUT_GPIO_DSPA3);
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA2);
                //pd_set_gpio_output(NUM_OUT_GPIO_DSPA1);
                fire_3rd_active = 0;
                fire_2nd_active = 0;
                fire_1st_active = 0;
            }
            else if (fire_2nd_active)
            {
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA2);
                //pd_set_gpio_output(NUM_OUT_GPIO_DSPA1);
                fire_2nd_active = 0;
                fire_1st_active = 0;
            }
            else if (fire_1st_active)
            {
                pd_set_gpio_output(NUM_OUT_GPIO_DSPA2);
                //pd_set_gpio_output(NUM_OUT_GPIO_DSPA1);
                fire_1st_active = 0;
            }
        }      
#endif // test -------------------------------------------------------------------------------------------

        sleep(NUM_TIME_INTERVAL_10S);
    } 
}

